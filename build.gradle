/* 因使用 @ConfigurationProperties ，故需加入 Optional，相關文件
	https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
	https://github.com/spring-gradle-plugins/propdeps-plugin
*/

buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

configure(allprojects) {
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'
}

group = 'tw.noah'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {

	compile('org.springframework.boot:spring-boot-starter')

	compileOnly('org.projectlombok:lombok')
	testCompileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')


	compile group: 'org.apache.logging.log4j', name: 'log4j-api'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core'

	optional "org.springframework.boot:spring-boot-configuration-processor"
}

compileJava.dependsOn(processResources)


ext.gitUrl = {
	def p1 = 'git config --get remote.origin.url'.execute()
	p1.waitFor()
	return p1.text.trim()
}
ext.gitBranch = {
	def p2 = 'git rev-parse --abbrev-ref HEAD'.execute()
	p2.waitFor()
	return p2.text.trim()
}
ext.gitHash = {
	def p3 = 'git describe --always HEAD'.execute()
	p3.waitFor()
	return p3.text.trim()
}

bootJar {
	baseName = 'batch'
	version = '1.0.0'
	manifest {
		attributes('Build-Time': new Date().format("yyyy-MM-dd HH:mm:ssZ"),
				'Built-On': java.net.InetAddress.getLocalHost().toString(),
				'Built-By': System.getProperty('user.name'),
				'Built-JDK': System.getProperty('java.version'),
				'Git-Url': gitUrl(),
				'Git-Branch': gitBranch(),
				'Git-Commit': gitHash(),
		)

	}
}